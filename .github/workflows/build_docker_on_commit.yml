name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "${{ github.repository }}"
  IMAGE_TAG: "test"

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Save variables to disk
        run: |
          mkdir ~/varz 
          cat $(echo ./.env) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/VERSION

      - name: Set ALL variables for this job | Ã  la sauce GitHub Actions
        run: |
          echo "VERSION=$(cat ~/varz/VERSION)" >> $GITHUB_ENV
        
      - name: Show variables
        run: |
          echo "${{ env.VERSION }} < VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to registry DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      #- name: Build and push Docker image
      #  id: build-and-push
      #  uses: docker/build-push-action@v6
      #  with:
      #    #context: . # needs a checkout step
      #    #file: ./Dockerfile
      #    platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v6,linux/arm/v7
      #    push: ${{ github.event_name != 'pull_request' }}
      #    tags: |
      #      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      #      fmunsch/theengsgateway-docker:${{ env.IMAGE_TAG }}
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max
      #    #load: true

      #- name: Save Docker image
      #  run: docker save --output image.tar "${IMAGE_NAME}:${IMAGE_TAG}"
      #- name: Upload Docker image
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: docker-image
      #    path: image.tar
      #    retention-days: 1
